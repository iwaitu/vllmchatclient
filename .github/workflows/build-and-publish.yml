name: Build and Publish NuGet Package

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ published ]

env:
  DOTNET_VERSION: '8.0.x'
  PROJECT_PATH: 'Microsoft.Extensions.AI.VllmChatClient/Microsoft.Extensions.AI.VllmChatClient.csproj'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # 获取完整历史记录以便版本控制

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}

    - name: Build project
      run: dotnet build ${{ env.PROJECT_PATH }} --configuration Release --no-restore

    - name: Run tests
      run: dotnet test --configuration Release --no-build --verbosity normal
      continue-on-error: true # 测试失败不阻止构建，但会显示警告

    - name: Create NuGet package
      run: dotnet pack ${{ env.PROJECT_PATH }} --configuration Release --no-build --output ./artifacts

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: nuget-packages
        path: ./artifacts/*.nupkg

  publish:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'))
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: nuget-packages
        path: ./artifacts

    - name: Publish to NuGet.org
      run: |
        for package in ./artifacts/*.nupkg; do
          echo "Publishing $package..."
          dotnet nuget push "$package" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
        done
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}

  # 可选：发布到 GitHub Packages
  publish-github:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: nuget-packages
        path: ./artifacts

    - name: Publish to GitHub Packages
      run: |
        for package in ./artifacts/*.nupkg; do
          echo "Publishing $package to GitHub Packages..."
          dotnet nuget push "$package" --api-key ${{ secrets.GITHUB_TOKEN }} --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json --skip-duplicate
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}