name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.5.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a prerelease?'
        required: false
        default: false
        type: boolean

env:
  DOTNET_VERSION: '8.0.x'
  PROJECT_PATH: 'Microsoft.Extensions.AI.VllmChatClient/Microsoft.Extensions.AI.VllmChatClient.csproj'

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Validate version format
      run: |
        if [[ ! "${{ github.event.inputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Error: Version must be in format X.Y.Z (e.g., 1.5.0)"
          exit 1
        fi

    - name: Update project version
      shell: pwsh
      run: |
        $projectPath = "${{ env.PROJECT_PATH }}"
        $newVersion = "${{ github.event.inputs.version }}"
        
        Write-Host "Updating version to: $newVersion"
        
        $content = Get-Content $projectPath -Raw
        $pattern = '<Version>[\d\.]+(-[a-zA-Z0-9]+)?</Version>'
        $replacement = "<Version>$newVersion</Version>"
        $newContent = $content -replace $pattern, $replacement
        
        Set-Content $projectPath $newContent -NoNewline
        Write-Host "Project file updated successfully"

    - name: Commit version update
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add ${{ env.PROJECT_PATH }}
        git commit -m "chore: release version ${{ github.event.inputs.version }}"
        git push

    - name: Create Git Tag
      run: |
        git tag "v${{ github.event.inputs.version }}"
        git push origin "v${{ github.event.inputs.version }}"

    - name: Build and Pack
      run: |
        dotnet restore ${{ env.PROJECT_PATH }}
        dotnet build ${{ env.PROJECT_PATH }} --configuration Release --no-restore
        dotnet pack ${{ env.PROJECT_PATH }} --configuration Release --no-build --output ./artifacts

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: "v${{ github.event.inputs.version }}"
        release_name: "Release ${{ github.event.inputs.version }}"
        body: |
          ## What's Changed
          Release version ${{ github.event.inputs.version }}
          
          ### Installation
          ```bash
          dotnet add package Ivilson.AI.VllmChatClient --version ${{ github.event.inputs.version }}
          ```
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ github.event.inputs.previous_version }}...v${{ github.event.inputs.version }}
        draft: false
        prerelease: ${{ github.event.inputs.prerelease }}

    - name: Upload NuGet package to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/Ivilson.AI.VllmChatClient.${{ github.event.inputs.version }}.nupkg
        asset_name: Ivilson.AI.VllmChatClient.${{ github.event.inputs.version }}.nupkg
        asset_content_type: application/zip

    - name: Publish to NuGet.org
      run: |
        for package in ./artifacts/*.nupkg; do
          echo "Publishing $package..."
          dotnet nuget push "$package" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
        done
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}